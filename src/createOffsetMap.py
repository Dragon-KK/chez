# The editor is mad laggy

ROOK_OFFSET_MAP = (((-8, -1), (8, 57), (1, 8), (-1, -1)), ((-8, 0), (8, 58), (1, 8), (-1, -1)), ((-8, 1), (8, 59), (1, 8), (-1, -1)), ((-8, 2), (8, 60), (1, 8), (-1, -1)), ((-8, 3), (8, 61), (1, 8), (-1, -1)), ((-8, 4), (8, 62), (1, 8), (-1, -1)), ((-8, 5), (8, 63), (1, 8), (-1, -1)), ((-8, 6), (8, 64), (1, 8), (-1, -1)), ((-8, -1), (8, 57), (1, 16), (-1, 7)), ((-8, 0), (8, 58), (1, 16), (-1, 7)), ((-8, 1), (8, 59), (1, 16), (-1, 7)), ((-8, 2), (8, 60), (1, 16), (-1, 7)), ((-8, 3), (8, 61), (1, 16), (-1, 7)), ((-8, 4), (8, 62), (1, 16), (-1, 7)), ((-8, 5), (8, 63), (1, 16), (-1, 7)), ((-8, 6), (8, 64), (1, 16), (-1, 7)), ((-8, -1), (8, 57), (1, 24), (-1, 15)), ((-8, 0), (8, 58), (1, 24), (-1, 15)), ((-8, 1), (8, 59), (1, 24), (-1, 15)), ((-8, 2), (8, 60), (1, 24), (-1, 15)), ((-8, 3), (8, 61), (1, 24), (-1, 15)), ((-8, 4), (8, 62), (1, 24), (-1, 15)), ((-8, 5), (8, 63), (1, 24), (-1, 15)), ((-8, 6), (8, 64), (1, 24), (-1, 15)), ((-8, -1), (8, 57), (1, 32), (-1, 23)), ((-8, 0), (8, 58), (1, 32), (-1, 23)), ((-8, 1), (8, 59), (1, 32), (-1, 23)), ((-8, 2), (8, 60), (1, 32), (-1, 23)), ((-8, 3), (8, 61), (1, 32), (-1, 23)), ((-8, 4), (8, 62), (1, 32), (-1, 23)), ((-8, 5), (8, 63), (1, 32), (-1, 23)), ((-8, 6), (8, 64), (1, 32), (-1, 23)), ((-8, -1), (8, 57), (1, 40), (-1, 31)), ((-8, 0), (8, 58), (1, 40), (-1, 31)), ((-8, 1), (8, 59), (1, 40), (-1, 31)), ((-8, 2), (8, 60), (1, 40), (-1, 31)), ((-8, 3), (8, 61), (1, 40), (-1, 31)), ((-8, 4), (8, 62), (1, 40), (-1, 31)), ((-8, 5), (8, 63), (1, 40), (-1, 31)), ((-8, 6), (8, 64), (1, 40), (-1, 31)), ((-8, -1), (8, 57), (1, 48), (-1, 39)), ((-8, 0), (8, 58), (1, 48), (-1, 39)), ((-8, 1), (8, 59), (1, 48), (-1, 39)), ((-8, 2), (8, 60), (1, 48), (-1, 39)), ((-8, 3), (8, 61), (1, 48), (-1, 39)), ((-8, 4), (8, 62), (1, 48), (-1, 39)), ((-8, 5), (8, 63), (1, 48), (-1, 39)), ((-8, 6), (8, 64), (1, 48), (-1, 39)), ((-8, -1), (8, 57), (1, 56), (-1, 47)), ((-8, 0), (8, 58), (1, 56), (-1, 47)), ((-8, 1), (8, 59), (1, 56), (-1, 47)), ((-8, 2), (8, 60), (1, 56), (-1, 47)), ((-8, 3), (8, 61), (1, 56), (-1, 47)), ((-8, 4), (8, 62), (1, 56), (-1, 47)), ((-8, 5), (8, 63), (1, 56), (-1, 47)), ((-8, 6), (8, 64), (1, 56), (-1, 47)), ((-8, -1), (8, 57), (1, 64), (-1, 55)), ((-8, 0), (8, 58), (1, 64), (-1, 55)), ((-8, 1), (8, 59), (1, 64), (-1, 55)), ((-8, 2), (8, 60), (1, 64), (-1, 55)), ((-8, 3), (8, 61), (1, 64), (-1, 55)), ((-8, 4), (8, 62), (1, 64), (-1, 55)), ((-8, 5), (8, 63), (1, 64), (-1, 55)), ((-8, 6), (8, 64), (1, 64), (-1, 55)))
# BISHOP_OFFSETS = (
#     -7, # up right
#     +7, # down left
#     +9, # down right
#     -9, # up left
# )
BISHOP_OFFSET_MAP = (((-7, -1), (7, 1), (9, 64), (-9, -1)), ((-7, 0), (7, 9), (9, 56), (-9, 0)), ((-7, 1), (7, 17), (9, 48), (-9, 1)), ((-7, 2), (7, 25), (9, 40), (-9, 2)), ((-7, 3), (7, 33), (9, 32), (-9, 3)), ((-7, 4), (7, 41), (9, 24), (-9, 4)), ((-7, 5), (7, 49), (9, 16), (-9, 5)), ((-7, 6), (7, 57), (9, 8), (-9, 6)), ((-7, 0), (7, 9), (9, 63), (-9, 7)), ((-7, 1), (7, 17), (9, 64), (-9, -1)), ((-7, 2), (7, 25), (9, 56), (-9, 0)), ((-7, 3), (7, 33), (9, 48), (-9, 1)), ((-7, 4), (7, 41), (9, 40), (-9, 2)), ((-7, 5), (7, 49), (9, 32), (-9, 3)), ((-7, 6), (7, 57), (9, 24), (-9, 4)), ((-7, 14), (7, 58), (9, 16), (-9, 5)), ((-7, 1), (7, 17), (9, 62), (-9, 15)), ((-7, 2), (7, 25), (9, 63), (-9, 7)), ((-7, 3), (7, 33), (9, 64), (-9, -1)), ((-7, 4), (7, 41), (9, 56), (-9, 0)), ((-7, 5), (7, 49), (9, 48), (-9, 1)), ((-7, 6), (7, 57), (9, 40), (-9, 2)), ((-7, 14), (7, 58), (9, 32), (-9, 3)), ((-7, 22), (7, 59), (9, 24), (-9, 4)), ((-7, 2), (7, 25), (9, 61), (-9, 23)), ((-7, 3), (7, 33), (9, 62), (-9, 15)), ((-7, 4), (7, 41), (9, 63), (-9, 7)), ((-7, 5), (7, 49), (9, 64), (-9, -1)), ((-7, 6), (7, 57), (9, 56), (-9, 0)), ((-7, 14), (7, 58), (9, 48), (-9, 1)), ((-7, 22), (7, 59), (9, 40), (-9, 2)), ((-7, 30), (7, 60), (9, 32), (-9, 3)), ((-7, 3), (7, 33), (9, 60), (-9, 31)), ((-7, 4), (7, 41), (9, 61), (-9, 23)), ((-7, 5), (7, 49), (9, 62), (-9, 15)), ((-7, 6), (7, 57), (9, 63), (-9, 7)), ((-7, 14), (7, 58), (9, 64), (-9, -1)), ((-7, 22), (7, 59), (9, 56), (-9, 0)), ((-7, 30), (7, 60), (9, 48), (-9, 1)), ((-7, 38), (7, 61), (9, 40), (-9, 2)), ((-7, 4), (7, 41), (9, 59), (-9, 39)), ((-7, 5), (7, 49), (9, 60), (-9, 31)), ((-7, 6), (7, 57), (9, 61), (-9, 23)), ((-7, 14), (7, 58), (9, 62), (-9, 15)), ((-7, 22), (7, 59), (9, 63), (-9, 7)), ((-7, 30), (7, 60), (9, 64), (-9, -1)), ((-7, 38), (7, 61), (9, 56), (-9, 0)), ((-7, 46), (7, 62), (9, 48), (-9, 1)), ((-7, 5), (7, 49), (9, 58), (-9, 47)), ((-7, 6), (7, 57), (9, 59), (-9, 39)), ((-7, 14), (7, 58), (9, 60), (-9, 31)), ((-7, 22), (7, 59), (9, 61), (-9, 23)), ((-7, 30), (7, 60), (9, 62), (-9, 15)), ((-7, 38), (7, 61), (9, 63), (-9, 7)), ((-7, 46), (7, 62), (9, 64), (-9, -1)), ((-7, 54), (7, 63), (9, 56), (-9, 0)), ((-7, 6), (7, 57), (9, 57), (-9, 55)), ((-7, 14), (7, 58), (9, 58), (-9, 47)), ((-7, 22), (7, 59), (9, 59), (-9, 39)), ((-7, 30), (7, 60), (9, 60), (-9, 31)), ((-7, 38), (7, 61), (9, 61), (-9, 23)), ((-7, 46), (7, 62), (9, 62), (-9, 15)), ((-7, 54), (7, 63), (9, 63), (-9, 7)), ((-7, 62), (7, 64), (9, 64), (-9, -1)))
# ROOK_OFFSETS = (
#     -8, # up
#     +8, # down
#     +1, # right
#     -1, # left
# )
QUEEN_OFFSET_MAP = (((-8, -1), (8, 57), (1, 8), (-1, -1), (-7, -1), (7, 1), (9, 64), (-9, -1)), ((-8, 0), (8, 58), (1, 8), (-1, -1), (-7, 0), (7, 9), (9, 56), (-9, 0)), ((-8, 1), (8, 59), (1, 8), (-1, -1), (-7, 1), (7, 17), (9, 48), (-9, 1)), ((-8, 2), (8, 60), (1, 8), (-1, -1), (-7, 2), (7, 25), (9, 40), (-9, 2)), ((-8, 3), (8, 61), (1, 8), (-1, -1), (-7, 3), (7, 33), (9, 32), (-9, 3)), ((-8, 4), (8, 62), (1, 8), (-1, -1), (-7, 4), (7, 41), (9, 24), (-9, 4)), ((-8, 5), (8, 63), (1, 8), (-1, -1), (-7, 5), (7, 49), (9, 16), (-9, 5)), ((-8, 6), (8, 64), (1, 8), (-1, -1), (-7, 6), (7, 57), (9, 8), (-9, 6)), ((-8, -1), (8, 57), (1, 16), (-1, 7), (-7, 0), (7, 9), (9, 63), (-9, 7)), ((-8, 0), (8, 58), (1, 16), (-1, 7), (-7, 1), (7, 17), (9, 64), (-9, -1)), ((-8, 1), (8, 59), (1, 16), (-1, 7), (-7, 2), (7, 25), (9, 56), (-9, 0)), ((-8, 2), (8, 60), (1, 16), (-1, 7), (-7, 3), (7, 33), (9, 48), (-9, 1)), ((-8, 3), (8, 61), (1, 16), (-1, 7), (-7, 4), (7, 41), (9, 40), (-9, 2)), ((-8, 4), (8, 62), (1, 16), (-1, 7), (-7, 5), (7, 49), (9, 32), (-9, 3)), ((-8, 5), (8, 63), (1, 16), (-1, 7), (-7, 6), (7, 57), (9, 24), (-9, 4)), ((-8, 6), (8, 64), (1, 16), (-1, 7), (-7, 14), (7, 58), (9, 16), (-9, 5)), ((-8, -1), (8, 57), (1, 24), (-1, 15), (-7, 1), (7, 17), (9, 62), (-9, 15)), ((-8, 0), (8, 58), (1, 24), (-1, 15), (-7, 2), (7, 25), (9, 63), (-9, 7)), ((-8, 1), (8, 59), (1, 24), (-1, 15), (-7, 3), (7, 33), (9, 64), (-9, -1)), ((-8, 2), (8, 60), (1, 24), (-1, 15), (-7, 4), (7, 41), (9, 56), (-9, 0)), ((-8, 3), (8, 61), (1, 24), (-1, 15), (-7, 5), (7, 49), (9, 48), (-9, 1)), ((-8, 4), (8, 62), (1, 24), (-1, 15), (-7, 6), (7, 57), (9, 40), (-9, 2)), ((-8, 5), (8, 63), (1, 24), (-1, 15), (-7, 14), (7, 58), (9, 32), (-9, 3)), ((-8, 6), (8, 64), (1, 24), (-1, 15), (-7, 22), (7, 59), (9, 24), (-9, 4)), ((-8, -1), (8, 57), (1, 32), (-1, 23), (-7, 2), (7, 25), (9, 61), (-9, 23)), ((-8, 0), (8, 58), (1, 32), (-1, 23), (-7, 3), (7, 33), (9, 62), (-9, 15)), ((-8, 1), (8, 59), (1, 32), (-1, 23), (-7, 4), (7, 41), (9, 63), (-9, 7)), ((-8, 2), (8, 60), (1, 32), (-1, 23), (-7, 5), (7, 49), (9, 64), (-9, -1)), ((-8, 3), (8, 61), (1, 32), (-1, 23), (-7, 6), (7, 57), (9, 56), (-9, 0)), ((-8, 4), (8, 62), (1, 32), (-1, 23), (-7, 14), (7, 58), (9, 48), (-9, 1)), ((-8, 5), (8, 63), (1, 32), (-1, 23), (-7, 22), (7, 59), (9, 40), (-9, 2)), ((-8, 6), (8, 64), (1, 32), (-1, 23), (-7, 30), (7, 60), (9, 32), (-9, 3)), ((-8, -1), (8, 57), (1, 40), (-1, 31), (-7, 3), (7, 33), (9, 60), (-9, 31)), ((-8, 0), (8, 58), (1, 40), (-1, 31), (-7, 4), (7, 41), (9, 61), (-9, 23)), ((-8, 1), (8, 59), (1, 40), (-1, 31), (-7, 5), (7, 49), (9, 62), (-9, 15)), ((-8, 2), (8, 60), (1, 40), (-1, 31), (-7, 6), (7, 57), (9, 63), (-9, 7)), ((-8, 3), (8, 61), (1, 40), (-1, 31), (-7, 14), (7, 58), (9, 64), (-9, -1)), ((-8, 4), (8, 62), (1, 40), (-1, 31), (-7, 22), (7, 59), (9, 56), (-9, 0)), ((-8, 5), (8, 63), (1, 40), (-1, 31), (-7, 30), (7, 60), (9, 48), (-9, 1)), ((-8, 6), (8, 64), (1, 40), (-1, 31), (-7, 38), (7, 61), (9, 40), (-9, 2)), ((-8, -1), (8, 57), (1, 48), (-1, 39), (-7, 4), (7, 41), (9, 59), (-9, 39)), ((-8, 0), (8, 58), (1, 48), (-1, 39), (-7, 5), (7, 49), (9, 60), (-9, 31)), ((-8, 1), (8, 59), (1, 48), (-1, 39), (-7, 6), (7, 57), (9, 61), (-9, 23)), ((-8, 2), (8, 60), (1, 48), (-1, 39), (-7, 14), (7, 58), (9, 62), (-9, 15)), ((-8, 3), (8, 61), (1, 48), (-1, 39), (-7, 22), (7, 59), (9, 63), (-9, 7)), ((-8, 4), (8, 62), (1, 48), (-1, 39), (-7, 30), (7, 60), (9, 64), (-9, -1)), ((-8, 5), (8, 63), (1, 48), (-1, 39), (-7, 38), (7, 61), (9, 56), (-9, 0)), ((-8, 6), (8, 64), (1, 48), (-1, 39), (-7, 46), (7, 62), (9, 48), (-9, 1)), ((-8, -1), (8, 57), (1, 56), (-1, 47), (-7, 5), (7, 49), (9, 58), (-9, 47)), ((-8, 0), (8, 58), (1, 56), (-1, 47), (-7, 6), (7, 57), (9, 59), (-9, 39)), ((-8, 1), (8, 59), (1, 56), (-1, 47), (-7, 14), (7, 58), (9, 60), (-9, 31)), ((-8, 2), (8, 60), (1, 56), (-1, 47), (-7, 22), (7, 59), (9, 61), (-9, 23)), ((-8, 3), (8, 61), (1, 56), (-1, 47), (-7, 30), (7, 60), (9, 62), (-9, 15)), ((-8, 4), (8, 62), (1, 56), (-1, 47), (-7, 38), (7, 61), (9, 63), (-9, 7)), ((-8, 5), (8, 63), (1, 56), (-1, 47), (-7, 46), (7, 62), (9, 64), (-9, -1)), ((-8, 6), (8, 64), (1, 56), (-1, 47), (-7, 54), (7, 63), (9, 56), (-9, 0)), ((-8, -1), (8, 57), (1, 64), (-1, 55), (-7, 6), (7, 57), (9, 57), (-9, 55)), ((-8, 0), (8, 58), (1, 64), (-1, 55), (-7, 14), (7, 58), (9, 58), (-9, 47)), ((-8, 1), (8, 59), (1, 64), (-1, 55), (-7, 22), (7, 59), (9, 59), (-9, 39)), ((-8, 2), (8, 60), (1, 64), (-1, 55), (-7, 30), (7, 60), (9, 60), (-9, 31)), ((-8, 3), (8, 61), (1, 64), (-1, 55), (-7, 38), (7, 61), (9, 61), (-9, 23)), ((-8, 4), (8, 62), (1, 64), (-1, 55), (-7, 46), (7, 62), (9, 62), (-9, 15)), ((-8, 5), (8, 63), (1, 64), (-1, 55), (-7, 54), (7, 63), (9, 63), (-9, 7)), ((-8, 6), (8, 64), (1, 64), (-1, 55), (-7, 62), (7, 64), (9, 64), (-9, -1)))

KNIGHT_MOVE_MAP = ((10, 17), (11, 18, 16), (12, 19, 17, 8), (13, 20, 18, 9), (14, 21, 19, 10), (15, 22, 20, 11), (23, 21, 12), (22, 13), (2, 18, 25), (3, 19, 26, 24), (4, 20, 27, 25, 16, 0), (5, 21, 28, 26, 17, 1), (6, 22, 29, 27, 18, 2), (7, 23, 30, 28, 19, 3), (31, 29, 20, 4), (30, 21, 5), (1, 10, 26, 33), (2, 11, 27, 34, 32, 0), (3, 12, 28, 35, 33, 24, 8, 1), (4, 13, 29, 36, 34, 25, 9, 2), (5, 14, 30, 37, 35, 26, 10, 3), (6, 15, 31, 38, 36, 27, 11, 4), (7, 39, 37, 28, 12, 5), (38, 29, 13, 6), (9, 18, 34, 41), (10, 19, 35, 42, 40, 8), (11, 20, 36, 43, 41, 32, 16, 9), (12, 21, 37, 44, 42, 33, 17, 10), (13, 22, 38, 45, 43, 34, 18, 11), (14, 23, 39, 46, 44, 35, 19, 12), (15, 47, 45, 36, 20, 13), (46, 37, 21, 14), (17, 26, 42, 49), (18, 27, 43, 50, 48, 16), (19, 28, 44, 51, 49, 40, 24, 17), (20, 29, 45, 52, 50, 41, 25, 18), (21, 30, 46, 53, 51, 42, 26, 19), (22, 31, 47, 54, 52, 43, 27, 20), (23, 55, 53, 44, 28, 21), (54, 45, 29, 22), (25, 34, 50, 57), (26, 35, 51, 58, 56, 24), (27, 36, 52, 59, 57, 48, 32, 25), (28, 37, 53, 60, 58, 49, 33, 26), (29, 38, 54, 61, 59, 50, 34, 27), (30, 39, 55, 62, 60, 51, 35, 28), (31, 63, 61, 52, 36, 29), (62, 53, 37, 30), (33, 42, 58), (34, 43, 59, 32), (35, 44, 60, 56, 40, 33), (36, 45, 61, 57, 41, 34), (37, 46, 62, 58, 42, 35), (38, 47, 63, 59, 43, 36), (39, 60, 44, 37), (61, 45, 38), (41, 50), (42, 51, 40), (43, 52, 48, 41), (44, 53, 49, 42), (45, 54, 50, 43), (46, 55, 51, 44), (47, 52, 45), (53, 46))
# Knight bro
# KNIGHT_OFFSETS = (
#     -15, # UUR
#     -6 , # URR
#     +10, # DRR
#     +17, # DDR
#     +15, # DDL
#     +6 , # DLL
#     -10, # ULL
#     -17, # UUL
# )


# displacements = [
#     [] for _ in range(64)
# ]
# # BISHOP_OFFSETS = (((-8, -1), (8, 57), (1, 8), (-1, -1)), ((-8, 0), (8, 58), (1, 8), (-1, -1)), ((-8, 1), (8, 59), (1, 8), (-1, -1)), ((-8, 2), (8, 60), (1, 8), (-1, -1)), ((-8, 3), (8, 61), (1, 8), (-1, -1)), ((-8, 4), (8, 62), (1, 8), (-1, -1)), ((-8, 5), (8, 63), (1, 8), (-1, -1)), ((-8, 6), (8, 64), (1, 8), (-1, -1)), ((-8, -1), (8, 57), (1, 16), (-1, 7)), ((-8, 0), (8, 58), (1, 16), (-1, 7)), ((-8, 1), (8, 59), (1, 16), (-1, 7)), ((-8, 2), (8, 60), (1, 16), (-1, 7)), ((-8, 3), (8, 61), (1, 16), (-1, 7)), ((-8, 4), (8, 62), (1, 16), (-1, 7)), ((-8, 5), (8, 63), (1, 16), (-1, 7)), ((-8, 6), (8, 64), (1, 16), (-1, 7)), ((-8, -1), (8, 57), (1, 24), (-1, 15)), ((-8, 0), (8, 58), (1, 24), (-1, 15)), ((-8, 1), (8, 59), (1, 24), (-1, 15)), ((-8, 2), (8, 60), (1, 24), (-1, 15)), ((-8, 3), (8, 61), (1, 24), (-1, 15)), ((-8, 4), (8, 62), (1, 24), (-1, 15)), ((-8, 5), (8, 63), (1, 24), (-1, 15)), ((-8, 6), (8, 64), (1, 24), (-1, 15)), ((-8, -1), (8, 57), (1, 32), (-1, 23)), ((-8, 0), (8, 58), (1, 32), (-1, 23)), ((-8, 1), (8, 59), (1, 32), (-1, 23)), ((-8, 2), (8, 60), (1, 32), (-1, 23)), ((-8, 3), (8, 61), (1, 32), (-1, 23)), ((-8, 4), (8, 62), (1, 32), (-1, 23)), ((-8, 5), (8, 63), (1, 32), (-1, 23)), ((-8, 6), (8, 64), (1, 32), (-1, 23)), ((-8, -1), (8, 57), (1, 40), (-1, 31)), ((-8, 0), (8, 58), (1, 40), (-1, 31)), ((-8, 1), (8, 59), (1, 40), (-1, 31)), ((-8, 2), (8, 60), (1, 40), (-1, 31)), ((-8, 3), (8, 61), (1, 40), (-1, 31)), ((-8, 4), (8, 62), (1, 40), (-1, 31)), ((-8, 5), (8, 63), (1, 40), (-1, 31)), ((-8, 6), (8, 64), (1, 40), (-1, 31)), ((-8, -1), (8, 57), (1, 48), (-1, 39)), ((-8, 0), (8, 58), (1, 48), (-1, 39)), ((-8, 1), (8, 59), (1, 48), (-1, 39)), ((-8, 2), (8, 60), (1, 48), (-1, 39)), ((-8, 3), (8, 61), (1, 48), (-1, 39)), ((-8, 4), (8, 62), (1, 48), (-1, 39)), ((-8, 5), (8, 63), (1, 48), (-1, 39)), ((-8, 6), (8, 64), (1, 48), (-1, 39)), ((-8, -1), (8, 57), (1, 56), (-1, 47)), ((-8, 0), (8, 58), (1, 56), (-1, 47)), ((-8, 1), (8, 59), (1, 56), (-1, 47)), ((-8, 2), (8, 60), (1, 56), (-1, 47)), ((-8, 3), (8, 61), (1, 56), (-1, 47)), ((-8, 4), (8, 62), (1, 56), (-1, 47)), ((-8, 5), (8, 63), (1, 56), (-1, 47)), ((-8, 6), (8, 64), (1, 56), (-1, 47)), ((-8, -1), (8, 57), (1, 64), (-1, 55)), ((-8, 0), (8, 58), (1, 64), (-1, 55)), ((-8, 1), (8, 59), (1, 64), (-1, 55)), ((-8, 2), (8, 60), (1, 64), (-1, 55)), ((-8, 3), (8, 61), (1, 64), (-1, 55)), ((-8, 4), (8, 62), (1, 64), (-1, 55)), ((-8, 5), (8, 63), (1, 64), (-1, 55)), ((-8, 6), (8, 64), (1, 64), (-1, 55)))
# BISHOP_OFFSETS = (
#     -7, # up right
#     +7, # down left
#     +9, # down right
#     -9, # up left
# )
# # ROOK_OFFSETS = (((-7, -1), (7, 1), (9, 64), (-9, -1)), ((-7, 0), (7, 9), (9, 56), (-9, 0)), ((-7, 1), (7, 17), (9, 48), (-9, 1)), ((-7, 2), (7, 25), (9, 40), (-9, 2)), ((-7, 3), (7, 33), (9, 32), (-9, 3)), ((-7, 4), (7, 41), (9, 24), (-9, 4)), ((-7, 5), (7, 49), (9, 16), (-9, 5)), ((-7, 6), (7, 57), (9, 8), (-9, 6)), ((-7, 0), (7, 9), (9, 63), (-9, 7)), ((-7, 1), (7, 17), (9, 64), (-9, -1)), ((-7, 2), (7, 25), (9, 56), (-9, 0)), ((-7, 3), (7, 33), (9, 48), (-9, 1)), ((-7, 4), (7, 41), (9, 40), (-9, 2)), ((-7, 5), (7, 49), (9, 32), (-9, 3)), ((-7, 6), (7, 57), (9, 24), (-9, 4)), ((-7, 14), (7, 58), (9, 16), (-9, 5)), ((-7, 1), (7, 17), (9, 62), (-9, 15)), ((-7, 2), (7, 25), (9, 63), (-9, 7)), ((-7, 3), (7, 33), (9, 64), (-9, -1)), ((-7, 4), (7, 41), (9, 56), (-9, 0)), ((-7, 5), (7, 49), (9, 48), (-9, 1)), ((-7, 6), (7, 57), (9, 40), (-9, 2)), ((-7, 14), (7, 58), (9, 32), (-9, 3)), ((-7, 22), (7, 59), (9, 24), (-9, 4)), ((-7, 2), (7, 25), (9, 61), (-9, 23)), ((-7, 3), (7, 33), (9, 62), (-9, 15)), ((-7, 4), (7, 41), (9, 63), (-9, 7)), ((-7, 5), (7, 49), (9, 64), (-9, -1)), ((-7, 6), (7, 57), (9, 56), (-9, 0)), ((-7, 14), (7, 58), (9, 48), (-9, 1)), ((-7, 22), (7, 59), (9, 40), (-9, 2)), ((-7, 30), (7, 60), (9, 32), (-9, 3)), ((-7, 3), (7, 33), (9, 60), (-9, 31)), ((-7, 4), (7, 41), (9, 61), (-9, 23)), ((-7, 5), (7, 49), (9, 62), (-9, 15)), ((-7, 6), (7, 57), (9, 63), (-9, 7)), ((-7, 14), (7, 58), (9, 64), (-9, -1)), ((-7, 22), (7, 59), (9, 56), (-9, 0)), ((-7, 30), (7, 60), (9, 48), (-9, 1)), ((-7, 38), (7, 61), (9, 40), (-9, 2)), ((-7, 4), (7, 41), (9, 59), (-9, 39)), ((-7, 5), (7, 49), (9, 60), (-9, 31)), ((-7, 6), (7, 57), (9, 61), (-9, 23)), ((-7, 14), (7, 58), (9, 62), (-9, 15)), ((-7, 22), (7, 59), (9, 63), (-9, 7)), ((-7, 30), (7, 60), (9, 64), (-9, -1)), ((-7, 38), (7, 61), (9, 56), (-9, 0)), ((-7, 46), (7, 62), (9, 48), (-9, 1)), ((-7, 5), (7, 49), (9, 58), (-9, 47)), ((-7, 6), (7, 57), (9, 59), (-9, 39)), ((-7, 14), (7, 58), (9, 60), (-9, 31)), ((-7, 22), (7, 59), (9, 61), (-9, 23)), ((-7, 30), (7, 60), (9, 62), (-9, 15)), ((-7, 38), (7, 61), (9, 63), (-9, 7)), ((-7, 46), (7, 62), (9, 64), (-9, -1)), ((-7, 54), (7, 63), (9, 56), (-9, 0)), ((-7, 6), (7, 57), (9, 57), (-9, 55)), ((-7, 14), (7, 58), (9, 58), (-9, 47)), ((-7, 22), (7, 59), (9, 59), (-9, 39)), ((-7, 30), (7, 60), (9, 60), (-9, 31)), ((-7, 38), (7, 61), (9, 61), (-9, 23)), ((-7, 46), (7, 62), (9, 62), (-9, 15)), ((-7, 54), (7, 63), (9, 63), (-9, 7)), ((-7, 62), (7, 64), (9, 64), (-9, -1)))
# ROOK_OFFSETS = (
#     -8, # up
#     +8, # down
#     +1, # right
#     -1, # left
# )

# bo = [
#     [] for _ in range(64)
# ]
# def sgn(n):
#     return -1 if n < 0 else 1
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8 == 7 or curr // 8  == 0:
#             displacements[square][-1] = curr + sgn( -7)
#             break
#         curr += -7
    
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8 == 0 or curr // 8  == 7:
#             displacements[square][-1] = curr + sgn( +7)
#             break
#         curr += +7

# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8 == 7 or curr // 8  == 7:
#             displacements[square][-1] = curr + sgn( +9)
#             break
#         curr += +9
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8 == 0 or curr // 8  == 0:
#             displacements[square][-1] = curr + sgn( -9)
#             break
#         curr += -9

# ROOK_OFFSETS = (
#     -8, # up
#     +8, # down
#     +1, # right
#     -1, # left
# )

# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr // 8  == 0:
#             displacements[square][-1] = curr + sgn( -8)
#             break
#         curr += -8
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr // 8  == 7:
#             displacements[square][-1] = curr + sgn( +8)
#             break
#         curr += +8
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8  == 7:
#             displacements[square][-1] = curr + sgn( +1)
#             break
#         curr += +1
# for square in range(64):
#     curr = square
#     displacements[square].append(curr)
#     while True:
#         if curr % 8  == 0:
#             displacements[square][-1] = curr + sgn( -1)
#             break
#         curr += -1

# bo = []
# ro = []
# xs = ((-1, 1, 64, -1, -1, 57, 8, -1), (0, 9, 56, 0, 0, 58, 8, -1), (1, 17, 48, 1, 1, 59, 8, -1), (2, 25, 40, 2, 2, 60, 8, -1), (3, 33, 32, 3, 3, 61, 8, -1), (4, 41, 24, 4, 4, 62, 8, -1), (5, 49, 16, 5, 5, 63, 8, -1), (6, 57, 8, 6, 6, 64, 8, -1), (0, 9, 63, 7, -1, 57, 16, 7), (1, 17, 64, -1, 0, 58, 16, 7), (2, 25, 56, 0, 1, 59, 16, 7), (3, 33, 48, 1, 2, 60, 16, 7), (4, 41, 40, 2, 3, 61, 16, 7), (5, 49, 32, 3, 4, 62, 16, 7), (6, 57, 24, 4, 5, 63, 16, 7), (14, 58, 16, 5, 6, 64, 16, 7), (1, 17, 62, 15, -1, 57, 24, 15), (2, 25, 63, 7, 0, 58, 24, 15), (3, 33, 64, -1, 1, 59, 24, 15), (4, 41, 56, 0, 2, 60, 24, 15), (5, 49, 48, 1, 3, 61, 24, 15), (6, 57, 40, 2, 4, 62, 24, 15), (14, 58, 32, 3, 5, 63, 24, 15), (22, 59, 24, 4, 6, 64, 24, 15), (2, 25, 61, 23, -1, 57, 32, 23), (3, 33, 62, 15, 0, 58, 32, 23), (4, 41, 63, 7, 1, 59, 32, 23), (5, 49, 64, -1, 2, 60, 32, 23), (6, 57, 56, 0, 3, 61, 32, 23), (14, 58, 48, 1, 4, 62, 32, 23), (22, 59, 40, 2, 5, 63, 32, 23), (30, 60, 32, 3, 6, 64, 32, 23), (3, 33, 60, 31, -1, 57, 40, 31), (4, 41, 61, 23, 0, 58, 40, 31), (5, 49, 62, 15, 1, 59, 40, 31), (6, 57, 63, 7, 2, 60, 40, 31), (14, 58, 64, -1, 3, 61, 40, 31), (22, 59, 56, 0, 4, 62, 40, 31), (30, 60, 48, 1, 5, 63, 40, 31), (38, 61, 40, 2, 6, 64, 40, 31), (4, 41, 59, 39, -1, 57, 48, 39), (5, 49, 60, 31, 0, 58, 48, 39), (6, 57, 61, 23, 1, 59, 48, 39), (14, 58, 62, 15, 2, 60, 48, 39), (22, 59, 63, 7, 3, 61, 48, 39), (30, 60, 64, -1, 4, 62, 48, 39), (38, 61, 56, 0, 5, 63, 48, 39), (46, 62, 48, 1, 6, 64, 48, 39), (5, 49, 58, 47, -1, 57, 56, 47), (6, 57, 59, 39, 0, 58, 56, 47), (14, 58, 60, 31, 1, 59, 56, 47), (22, 59, 61, 23, 2, 60, 56, 47), (30, 60, 62, 15, 3, 61, 56, 47), (38, 61, 63, 7, 4, 62, 56, 47), (46, 62, 64, -1, 5, 63, 56, 47), (54, 63, 56, 0, 6, 64, 56, 47), (6, 57, 57, 55, -1, 57, 64, 55), (14, 58, 58, 47, 0, 58, 64, 55), (22, 59, 59, 39, 1, 59, 64, 55), (30, 60, 60, 31, 2, 60, 64, 55), (38, 61, 61, 23, 3, 61, 64, 55), (46, 62, 62, 15, 4, 62, 64, 55), (54, 63, 63, 7, 5, 63, 64, 55), (62, 64, 64, -1, 6, 64, 64, 55))
# for s in range(64):
#     bo.append([])
#     for i in range(4):
#         bo[-1].append((BISHOP_OFFSETS[i], xs[s][i]))
#     print(BISHOP_OFFSETS[i])
# for s in range(64):
#     ro.append([])
    
#     for i in range(4):
#         ro[-1].append((ROOK_OFFSETS[i], xs[s][i + 4]))
#     # print(ro[-1])

# # print(tuple(tuple(i) for i in ro))
# # print(tuple(tuple(i) for i in bo))
# # print(ro[0])
# ro = tuple(tuple(i) for i in ro)
# bo = tuple(tuple(i) for i in bo)
# print(ro)
# print(bo)
# print(tuple(i+j for i,j in zip(tuple(tuple(i) for i in ro), tuple(tuple(i) for i in bo))))

# mmap = [
#     [] for _ in range(64)
# ]
# # KNIGHT_OFFSETS

# for square in range(64):
#     for offset in KNIGHT_OFFSETS:
#         end = square + offset
#         if not (end >=0 and end <= 63):continue
#         if (abs((end%8) - (square%8)) == 1 and abs((end//8) - (square//8)) == 2) or (abs((end%8) - (square%8)) == 2 and abs((end//8) - (square//8)) == 1):
#             mmap[square].append(end)

# print(tuple(tuple(i) for i in mmap))